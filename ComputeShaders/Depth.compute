#pragma kernel CSMain

float n_f;
float f;

int width;
int width_2;
int height_2;

float vDisW;
float vDisH;

Texture2D<float> _depthBuffer;
Texture2D<float4> _colorBuffer;

RWStructuredBuffer<float> _data;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	int a = 126;
	int r = (int)(_colorBuffer[id.xy].x*255);
	int g = (int)(_colorBuffer[id.xy].y*255);
	int b = (int)(_colorBuffer[id.xy].z*255);


	float sign;
	if(a < 128.0f) sign = 1.0f;
	else sign = -1.0f;

	float exponent = 2.0f * (a%128) - 126.0f;
	if(b<128.0f)exponent-=1.0f;

	float mantissa = (b%128)*65536.0f + g*256.0f + r + ((float)0x800000); 

	float result = sign*pow(2, exponent-23.0f)*mantissa;

	int index = (id.x + id.y * width)*4;
	
	_data[index + 0] = -1.0f / (n_f * _depthBuffer[id.xy] + f)*(width_2 - id.x)/(vDisW);
	_data[index + 1] = -1.0f / (n_f * _depthBuffer[id.xy] + f)*(height_2 - id.y)/(vDisH);
	_data[index + 2] = 1.0f / (n_f * _depthBuffer[id.xy] + f);
	
	_data[index + 3] = result;
}